<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.13.1/jquery-ui.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/moment@^2"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@^1"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/1.2.1/chartjs-plugin-zoom.min.js" integrity="sha512-klQv6lz2YR+MecyFYMFRuU2eAl8IPRo6zHnsc9n142TJuJHS8CG0ix4Oq9na9ceeg1u5EkBfZsFcV3U7J51iew==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js" integrity="sha512-UXumZrZNiOwnTcZSHLOfcTs0aos2MzBWHXOHOuB0J/R44QB0dwY5JgfbvljXcklVf65Gc4El6RjZ+lnwd2az2g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script src="/js/jquery.ui.datepicker-es.js"></script>
<script>
    $(function () {
        $("#datepicker").datepicker({
            changeMonth: true,
            changeYear: true
        });
        $("#datepicker").datepicker("option", "dateFormat", "yy-mm-dd", $.datepicker.regional["es"]);
        //$("#datepicker").datepicker('setDate', 'today');
        $("#datepicker").datepicker('setDate', {{{ json sensor.date }}});
        $("#datepicker").on("change", function () {
            var selected_date = $(this).val();
            let param = '?id=' + {{{ json sensor.code }}}+'&date=' + selected_date;
            window.location.href = `/termohigrometria/sensor${param}`;
        });
    });
</script>
<style>
    .chartBox {
        width: 100%;
        min-width: 340px;
        height: 75vh;
        /*width:80vw;*/
    }

    .input_datepicker {
        width: 100px;
        height: 24px;
        font-size: 14px;
        text-align: center;
        border-radius: 2px;
    }
</style>

<ul class="breadcrumb">
    <span><i class="fa fa-area-chart mx-2"></i></span>
    <li class="breadcrumb-item">
        <a href="/termohigrometria" class="text-primary">Termohigrometria</a>
    </li>
    <li class="breadcrumb-item">
        <label class="text-primary mb-0" data-toggle="tooltip" data-placement="bottom" title="">{{sensor.code}}</label>
    </li>
    <li class="breadcrumb-item">
        <span><i class="fa fa-calendar ml-2" aria-hidden="true"></i></span>
        <label class="text-primary mb-0" data-toggle="tooltip" data-placement="bottom" title="">Fecha : </label>
        <input type="text" id="datepicker" class="input_datepicker" type="text">

    </li>
</ul>

<div class="container-fluid">
    <div class="chartBox">
        <canvas id="myChart"></canvas>
    </div>

</div>



<script type="text/javascript">
    //rgb(85,85,85)
    //rgb(232,17,35) //1
    //rgb(240,120,132) //2,3
    //rgb(0, 99,177)  //4
    //rgb(106,166,238) //5,6
    //rgb(1,133,116) //7
    //rgb(153,153,153)

    // SET UP BLOCK
    const data = {
        labels: {{{ json data.datetime }}} ,
        datasets: [{
            label: 'Temperatura',
            backgroundColor: 'rgb(232,17,35)',
            borderColor: 'rgb(232,17,35)',
            data: {{{ json data.temperature }}},
            yAxisID: 'y_temp_axis',
        }, {
            label: 'Humedad Relativa',
            backgroundColor: 'rgb(0, 99,177)',
            borderColor: 'rgb(0, 99,177)',
            //borderDash:[100,50],
            data: {{{ json data.humidity }}},
            yAxisID: 'y_humd_axis',
        }, {
            label: 'Punto de Rocio',
            backgroundColor: 'rgb(1,133,116)',
            borderColor: 'rgb(1,133,116)',
            data: {{{ json data.dewpoint }}},
            yAxisID: 'y_temp_axis',
        }],
        pointRadius: 0
    };

    //LIMITS BLOCK
    /*const limitLine = {
        id: 'limitLine',
        beforeDraw(chart, args, options){
            const {ctx, chartArea:{top, right, bottom, left, width, height}, scales: {x,y_temp_axis, y_humd_axis} } = chart;
            ctx.save();
            ctx.strokeStyle = 'red';
            //ctx.strokeRect(left, chart.getDatasetMeta(0).data[options.yPosition].y, width,2);
            if (chart.data.datasets[0].label) {
                ctx.setLineDash([10, 20]);
                ctx.strokeRect(left, y_temp_axis.getPixelForValue(25) , width, 0);
                ctx.setLineDash([20, 5]);
                ctx.strokeRect(left, y_temp_axis.getPixelForValue(15) , width, 0);
            }
            ctx.strokeStyle = 'blue';
            //ctx.strokeRect(left, chart.getDatasetMeta(0).data[options.yPosition].y, width,2); 
            ctx.setLineDash([10, 5]);
            ctx.strokeRect(left, y_humd_axis.getPixelForValue(70) , width, 0);
            ctx.setLineDash([10, 10]);
            ctx.strokeRect(left, y_humd_axis.getPixelForValue(20) , width, 0); 
            //ctx.beginPath();
            //ctx.moveTo(left, y_temp_axis.getPixelForValue(25));
            //ctx.lineTo(width, y_temp_axis.getPixelForValue(25));
            //ctx.stroke();

            //console.log();
            ctx.restore();
        }
    };*/

    // CONFIG BLOCK
    const config = {
        type: 'line',
        data: data,
        //plugins:[limitLine],
        options: {
            elements: {
                point: {
                    radius: 0
                }
            },
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                mode: 'index',
                intersect: false,
            },
            stacked: false,
            plugins: {
                title: {
                    display: true,
                    text: 'Chart.js Line Chart - Multi Axis'
                },
                legend: {
                    position: "bottom",
                    align: "center"
                },
            
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'xy',
                    },
                    zoom: {
                        wheel: {
                            enabled: true,
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: 'xy',
                    }
                }
            },
            scales: {
                x: {
                    type: 'time',
                    min: new Date({{{ json sensor.date_from }}}),
                    max: new Date({{{ json sensor.date_to }}}),
                    time: {
                        unit: 'hour',
                        tooltipFormat: 'DD/MMM/YYYY HH:mm:ss',
                        displayFormats: {
                            'hour': 'HH:mm'
                        }
                    },
                },
                y_temp_axis: {
                    suggestedMin: 0,
                    suggestedMax: 50,
                    type: 'linear',
                    display: true,
                    position: 'left',                   
                },
                y_humd_axis: {                    
                    suggestedMin: 0,
                    suggestedMax: 100,
                    type: 'linear',
                    display: true,
                    position: 'right',
                },
            },
        },
    };
    // RENDER / INIT BLOCK
    const ctx = document.getElementById('myChart').getContext('2d');
    const myChart = new Chart(ctx, config);

    $('button').click(function(e) {
        $('.chartBox').toggleClass('fullscreen');
    });
</script>